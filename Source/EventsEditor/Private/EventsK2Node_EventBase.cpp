// Copyright Epic Games, Inc. All Rights Reserved.

#include "EventsK2Node_EventBase.h"
#include "EdGraphSchema_K2.h"
#include "Engine/Blueprint.h"
#include "BlueprintNodeSpawner.h"
#include "BlueprintActionDatabaseRegistrar.h"
#include "BlueprintEventLibrary.h"
#include "EventsManager.h"
#include "EventSystemBPLibrary.h"
#include "K2Node_CallFunction.h"
#include "KismetCompilerMisc.h"
#include "KismetCompiler.h"

namespace
{
	static FName DefaultPinName(TEXT("Default"));
	static FName EventPinName(TEXT("CustomEvent"));
	static FName SenderPinName(TEXT("Sernder"));
}


UEventsK2Node_EventBase::UEventsK2Node_EventBase(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
{
	OrphanedPinSaveMode = ESaveOrphanPinMode::SaveNone;
}

void UEventsK2Node_EventBase::PostLoad()
{
	Super::PostLoad();

}

void UEventsK2Node_EventBase::PinDefaultValueChanged(UEdGraphPin* Pin)
{
	if (Pin == GetEventPin())
	{
	
		TArray<UEdGraphPin*> OldPins = Pins;
		TArray<UEdGraphPin*> RemovedPins;
		for (int32 PinIdx = Pins.Num() - 1; PinIdx > 0; PinIdx--)
		{
			if (!Pins[PinIdx])
			{
				continue;
			}
			if (Pins[PinIdx]->PinName.ToString().StartsWith(MessageParamPrefix))
			{
				RemovedPins.Add(Pins[PinIdx]);
				PinNames.Remove(Pins[PinIdx]->PinName);
				Pins.RemoveAt(PinIdx);
			}
		}

		FString MsgKey = Pin->GetDefaultAsString();
		FString Left;
		FString Right;
		FString Key;
		MsgKey.Split("(TagName=\"", &Left,&Right);
		Right.Split("\")",&Key,&Left);
		auto MsgTag = FEventInfo::RequestEvent(*Key, false);
		auto Node = UEventsManager::Get().FindTagNode(MsgTag.GetTagName());
		if (Node)
		{
			for (auto& ParamterInfo : Node->Parameters)
			{
				FEdGraphPinType PinType;
				if (UEventSystemBPLibrary::GetPinTypeFromStr(ParamterInfo.Type.ToString(), PinType))
				{
					const FName PinName(GetUniquePinName());
					AddInnerPin(PinName,PinType);
					PinNames.Add(PinName);
				}
			}
		}
#if ENGINE_MINOR_VERSION < 20
		RewireOldPinsToNewPins(RemovedPins, Pins);
#else
		RewireOldPinsToNewPins(RemovedPins, Pins);
#endif
		GetGraph()->NotifyGraphChanged();
		Super::PinDefaultValueChanged(Pin);
		return;
	}
}

FString UEventsK2Node_EventBase::MessageParamPrefix = TEXT("Param");

void UEventsK2Node_EventBase::AllocateDefaultPins()
{
	CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_Exec, UEdGraphSchema_K2::PN_Execute);
	CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, UEdGraphSchema_K2::PN_Then);
	CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_Object, UEdGraphSchema_K2::PSC_Self, UEdGraphSchema_K2::PN_Self);
	CreateSelectionPin();
}

FText UEventsK2Node_EventBase::GetTooltipText() const
{
	return NSLOCTEXT("K2Node", "TestTag_EVENT_ToolTip", "Selects an output that matches the input value");
}

void UEventsK2Node_EventBase::GetMenuActions(FBlueprintActionDatabaseRegistrar& ActionRegistrar) const
{
	UClass* ActionKey = GetClass();
	if (ActionRegistrar.IsOpenForRegistration(ActionKey))
	{
		UBlueprintNodeSpawner* NodeSpawner = UBlueprintNodeSpawner::Create(GetClass());
		check(NodeSpawner != nullptr);

		ActionRegistrar.AddBlueprintAction(ActionKey, NodeSpawner);
	}
}

void UEventsK2Node_EventBase::RewireOldPinsToNewPins(TArray<UEdGraphPin*>& InOldPins, TArray<UEdGraphPin*>& InNewPins)
{
	DECLARE_SCOPE_HIERARCHICAL_COUNTER_FUNC()
	// @TODO: we should account for redirectors, orphaning etc. here too!

	for (UEdGraphPin* OldPin : InOldPins)
	{
		for (UEdGraphPin* NewPin : InNewPins)
		{
			if (OldPin->PinName == NewPin->PinName && OldPin->PinType == NewPin->PinType && OldPin->Direction == NewPin->Direction)
			{
				NewPin->MovePersistentDataFromOldPin(*OldPin);
				break;
			}
		}
	}

	DestroyPinList(InOldPins);
}

void UEventsK2Node_EventBase::DestroyPinList(TArray<UEdGraphPin*>& InPins)
{
	DECLARE_SCOPE_HIERARCHICAL_COUNTER_FUNC()

	UBlueprint* Blueprint = GetBlueprint();
	bool bNotify = false;
	if (Blueprint != nullptr)
	{
		bNotify = !Blueprint->bIsRegeneratingOnLoad;
	}

	// Throw away the original pins
	for (UEdGraphPin* Pin : InPins)
	{
		Pin->BreakAllPinLinks(bNotify);

		UEdGraphNode::DestroyPin(Pin);
	}
}

void UEventsK2Node_EventBase::CreateSelectionPin()
{
	const UEdGraphSchema_K2* K2Schema = GetDefault<UEdGraphSchema_K2>();
	UEdGraphPin* Pin = CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_Struct, FEventInfo::StaticStruct(), EventPinName);
	K2Schema->SetPinAutogeneratedDefaultValueBasedOnType(Pin);
}


UEdGraphPin* UEventsK2Node_EventBase::GetEventPin() const
{
	return FindPin(EventPinName);
}

UEdGraphPin* UEventsK2Node_EventBase::GetSelfPin() const
{
	return FindPin(UEdGraphSchema_K2::PN_Self);
}

UEdGraphPin* UEventsK2Node_EventBase::GetThenPin() const
{
	UEdGraphPin* Pin = FindPinChecked(UEdGraphSchema_K2::PN_Then);
	check(Pin->Direction == EGPD_Output);
	return Pin;
}

FName UEventsK2Node_EventBase::GetEventPinName()
{
	return EventPinName;
}

FName UEventsK2Node_EventBase::GetUniquePinName()
{
	FName NewPinName;
	int32 i = 0;
	while (true)
	{
		NewPinName = *FString::Printf(TEXT("%s%d"), *UEventsK2Node_EventBase::MessageParamPrefix,i++); *FString::FromInt(i++);
		if (!FindPin(NewPinName))
		{
			break;
		}
	}
	return NewPinName;
}
